{"ast":null,"code":"import axios from 'axios';\n\n// Base URL untuk API\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\n\n// Fungsi untuk menangani token\nconst getToken = () => localStorage.getItem('token');\nconst setToken = token => localStorage.setItem('token', token);\nconst removeToken = () => localStorage.removeItem('token');\n\n// Menyimpan informasi user\nconst setUser = user => localStorage.setItem('user', JSON.stringify(user));\nconst getUser = () => {\n  const userStr = localStorage.getItem('user');\n  return userStr ? JSON.parse(userStr) : null;\n};\nconst removeUser = () => localStorage.removeItem('user');\n\n// Konfigurasi axios dengan token\nconst authHeader = () => {\n  const token = getToken();\n  return token ? {\n    Authorization: `Bearer ${token}`\n  } : {};\n};\nconst userServices = {\n  // Pendaftaran user baru\n  register: async (email, password, role = 'customer') => {\n    try {\n      const response = await axios.post(`${API_URL}/auth/register`, {\n        email,\n        password,\n        role\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response;\n      throw ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || {\n        message: 'Terjadi kesalahan saat register'\n      };\n    }\n  },\n  // Login user\n  login: async (email, password) => {\n    try {\n      const response = await axios.post(`${API_URL}/auth/login`, {\n        email,\n        password\n      });\n\n      // Simpan token dan user data\n      const {\n        token,\n        user\n      } = response.data;\n      setToken(token);\n      setUser(user);\n      return response.data;\n    } catch (error) {\n      var _error$response2;\n      throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || {\n        message: 'Terjadi kesalahan saat login'\n      };\n    }\n  },\n  // Logout user\n  logout: () => {\n    removeToken();\n    removeUser();\n  },\n  // Mendapatkan profil user yang sedang login\n  getProfile: async () => {\n    try {\n      const response = await axios.get(`${API_URL}/auth/profile`, {\n        headers: authHeader()\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response3, _error$response4;\n      if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 401) {\n        // Token tidak valid, logout user\n        userServices.logout();\n      }\n      throw ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || {\n        message: 'Terjadi kesalahan saat mengambil profil'\n      };\n    }\n  },\n  // Mendapatkan semua users (admin only)\n  getAllUsers: async () => {\n    try {\n      const response = await axios.get(`${API_URL}/auth/users`, {\n        headers: authHeader()\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response5;\n      throw ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || {\n        message: 'Terjadi kesalahan saat mengambil data users'\n      };\n    }\n  },\n  // Cek apakah user sudah login\n  isLoggedIn: () => {\n    return !!getToken();\n  },\n  // Mendapatkan user saat ini\n  getCurrentUser: () => {\n    return getUser();\n  },\n  // Cek apakah user adalah admin\n  isAdmin: () => {\n    const user = getUser();\n    return user && user.role === 'admin';\n  },\n  // Cek apakah user adalah organization\n  isOrganization: () => {\n    const user = getUser();\n    return user && user.role === 'organization';\n  },\n  // Cek apakah user adalah customer\n  isCustomer: () => {\n    const user = getUser();\n    return user && user.role === 'customer';\n  }\n};\nexport default userServices;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","getToken","localStorage","getItem","setToken","token","setItem","removeToken","removeItem","setUser","user","JSON","stringify","getUser","userStr","parse","removeUser","authHeader","Authorization","userServices","register","email","password","role","response","post","data","error","_error$response","message","login","_error$response2","logout","getProfile","get","headers","_error$response3","_error$response4","status","getAllUsers","_error$response5","isLoggedIn","getCurrentUser","isAdmin","isOrganization","isCustomer"],"sources":["C:/nodejsapp/utsbottledelivery/frontend/src/services/servicesAPI.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Base URL untuk API\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\r\n\r\n// Fungsi untuk menangani token\r\nconst getToken = () => localStorage.getItem('token');\r\nconst setToken = (token) => localStorage.setItem('token', token);\r\nconst removeToken = () => localStorage.removeItem('token');\r\n\r\n// Menyimpan informasi user\r\nconst setUser = (user) => localStorage.setItem('user', JSON.stringify(user));\r\nconst getUser = () => {\r\n    const userStr = localStorage.getItem('user');\r\n    return userStr ? JSON.parse(userStr) : null;\r\n};\r\nconst removeUser = () => localStorage.removeItem('user');\r\n\r\n// Konfigurasi axios dengan token\r\nconst authHeader = () => {\r\n    const token = getToken();\r\n    return token ? { Authorization: `Bearer ${token}` } : {};\r\n};\r\n\r\nconst userServices = {\r\n    // Pendaftaran user baru\r\n    register: async (email, password, role = 'customer') => {\r\n        try {\r\n            const response = await axios.post(`${API_URL}/auth/register`, {\r\n                email,\r\n                password,\r\n                role\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            throw error.response?.data || { message: 'Terjadi kesalahan saat register' };\r\n        }\r\n    },\r\n    \r\n    // Login user\r\n    login: async (email, password) => {\r\n        try {\r\n            const response = await axios.post(`${API_URL}/auth/login`, {\r\n                email,\r\n                password\r\n            });\r\n            \r\n            // Simpan token dan user data\r\n            const { token, user } = response.data;\r\n            setToken(token);\r\n            setUser(user);\r\n            \r\n            return response.data;\r\n        } catch (error) {\r\n            throw error.response?.data || { message: 'Terjadi kesalahan saat login' };\r\n        }\r\n    },\r\n    \r\n    // Logout user\r\n    logout: () => {\r\n        removeToken();\r\n        removeUser();\r\n    },\r\n    \r\n    // Mendapatkan profil user yang sedang login\r\n    getProfile: async () => {\r\n        try {\r\n            const response = await axios.get(`${API_URL}/auth/profile`, {\r\n                headers: authHeader()\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            if (error.response?.status === 401) {\r\n                // Token tidak valid, logout user\r\n                userServices.logout();\r\n            }\r\n            throw error.response?.data || { message: 'Terjadi kesalahan saat mengambil profil' };\r\n        }\r\n    },\r\n    \r\n    // Mendapatkan semua users (admin only)\r\n    getAllUsers: async () => {\r\n        try {\r\n            const response = await axios.get(`${API_URL}/auth/users`, {\r\n                headers: authHeader()\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            throw error.response?.data || { message: 'Terjadi kesalahan saat mengambil data users' };\r\n        }\r\n    },\r\n    \r\n    // Cek apakah user sudah login\r\n    isLoggedIn: () => {\r\n        return !!getToken();\r\n    },\r\n    \r\n    // Mendapatkan user saat ini\r\n    getCurrentUser: () => {\r\n        return getUser();\r\n    },\r\n    \r\n    // Cek apakah user adalah admin\r\n    isAdmin: () => {\r\n        const user = getUser();\r\n        return user && user.role === 'admin';\r\n    },\r\n    \r\n    // Cek apakah user adalah organization\r\n    isOrganization: () => {\r\n        const user = getUser();\r\n        return user && user.role === 'organization';\r\n    },\r\n    \r\n    // Cek apakah user adalah customer\r\n    isCustomer: () => {\r\n        const user = getUser();\r\n        return user && user.role === 'customer';\r\n    }\r\n};\r\n\r\nexport default userServices;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;;AAE5E;AACA,MAAMC,QAAQ,GAAGA,CAAA,KAAMC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;AACpD,MAAMC,QAAQ,GAAIC,KAAK,IAAKH,YAAY,CAACI,OAAO,CAAC,OAAO,EAAED,KAAK,CAAC;AAChE,MAAME,WAAW,GAAGA,CAAA,KAAML,YAAY,CAACM,UAAU,CAAC,OAAO,CAAC;;AAE1D;AACA,MAAMC,OAAO,GAAIC,IAAI,IAAKR,YAAY,CAACI,OAAO,CAAC,MAAM,EAAEK,IAAI,CAACC,SAAS,CAACF,IAAI,CAAC,CAAC;AAC5E,MAAMG,OAAO,GAAGA,CAAA,KAAM;EAClB,MAAMC,OAAO,GAAGZ,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;EAC5C,OAAOW,OAAO,GAAGH,IAAI,CAACI,KAAK,CAACD,OAAO,CAAC,GAAG,IAAI;AAC/C,CAAC;AACD,MAAME,UAAU,GAAGA,CAAA,KAAMd,YAAY,CAACM,UAAU,CAAC,MAAM,CAAC;;AAExD;AACA,MAAMS,UAAU,GAAGA,CAAA,KAAM;EACrB,MAAMZ,KAAK,GAAGJ,QAAQ,CAAC,CAAC;EACxB,OAAOI,KAAK,GAAG;IAAEa,aAAa,EAAE,UAAUb,KAAK;EAAG,CAAC,GAAG,CAAC,CAAC;AAC5D,CAAC;AAED,MAAMc,YAAY,GAAG;EACjB;EACAC,QAAQ,EAAE,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,EAAEC,IAAI,GAAG,UAAU,KAAK;IACpD,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAM5B,KAAK,CAAC6B,IAAI,CAAC,GAAG5B,OAAO,gBAAgB,EAAE;QAC1DwB,KAAK;QACLC,QAAQ;QACRC;MACJ,CAAC,CAAC;MACF,OAAOC,QAAQ,CAACE,IAAI;IACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAC,eAAA;MACZ,MAAM,EAAAA,eAAA,GAAAD,KAAK,CAACH,QAAQ,cAAAI,eAAA,uBAAdA,eAAA,CAAgBF,IAAI,KAAI;QAAEG,OAAO,EAAE;MAAkC,CAAC;IAChF;EACJ,CAAC;EAED;EACAC,KAAK,EAAE,MAAAA,CAAOT,KAAK,EAAEC,QAAQ,KAAK;IAC9B,IAAI;MACA,MAAME,QAAQ,GAAG,MAAM5B,KAAK,CAAC6B,IAAI,CAAC,GAAG5B,OAAO,aAAa,EAAE;QACvDwB,KAAK;QACLC;MACJ,CAAC,CAAC;;MAEF;MACA,MAAM;QAAEjB,KAAK;QAAEK;MAAK,CAAC,GAAGc,QAAQ,CAACE,IAAI;MACrCtB,QAAQ,CAACC,KAAK,CAAC;MACfI,OAAO,CAACC,IAAI,CAAC;MAEb,OAAOc,QAAQ,CAACE,IAAI;IACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAI,gBAAA;MACZ,MAAM,EAAAA,gBAAA,GAAAJ,KAAK,CAACH,QAAQ,cAAAO,gBAAA,uBAAdA,gBAAA,CAAgBL,IAAI,KAAI;QAAEG,OAAO,EAAE;MAA+B,CAAC;IAC7E;EACJ,CAAC;EAED;EACAG,MAAM,EAAEA,CAAA,KAAM;IACVzB,WAAW,CAAC,CAAC;IACbS,UAAU,CAAC,CAAC;EAChB,CAAC;EAED;EACAiB,UAAU,EAAE,MAAAA,CAAA,KAAY;IACpB,IAAI;MACA,MAAMT,QAAQ,GAAG,MAAM5B,KAAK,CAACsC,GAAG,CAAC,GAAGrC,OAAO,eAAe,EAAE;QACxDsC,OAAO,EAAElB,UAAU,CAAC;MACxB,CAAC,CAAC;MACF,OAAOO,QAAQ,CAACE,IAAI;IACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAS,gBAAA,EAAAC,gBAAA;MACZ,IAAI,EAAAD,gBAAA,GAAAT,KAAK,CAACH,QAAQ,cAAAY,gBAAA,uBAAdA,gBAAA,CAAgBE,MAAM,MAAK,GAAG,EAAE;QAChC;QACAnB,YAAY,CAACa,MAAM,CAAC,CAAC;MACzB;MACA,MAAM,EAAAK,gBAAA,GAAAV,KAAK,CAACH,QAAQ,cAAAa,gBAAA,uBAAdA,gBAAA,CAAgBX,IAAI,KAAI;QAAEG,OAAO,EAAE;MAA0C,CAAC;IACxF;EACJ,CAAC;EAED;EACAU,WAAW,EAAE,MAAAA,CAAA,KAAY;IACrB,IAAI;MACA,MAAMf,QAAQ,GAAG,MAAM5B,KAAK,CAACsC,GAAG,CAAC,GAAGrC,OAAO,aAAa,EAAE;QACtDsC,OAAO,EAAElB,UAAU,CAAC;MACxB,CAAC,CAAC;MACF,OAAOO,QAAQ,CAACE,IAAI;IACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAa,gBAAA;MACZ,MAAM,EAAAA,gBAAA,GAAAb,KAAK,CAACH,QAAQ,cAAAgB,gBAAA,uBAAdA,gBAAA,CAAgBd,IAAI,KAAI;QAAEG,OAAO,EAAE;MAA8C,CAAC;IAC5F;EACJ,CAAC;EAED;EACAY,UAAU,EAAEA,CAAA,KAAM;IACd,OAAO,CAAC,CAACxC,QAAQ,CAAC,CAAC;EACvB,CAAC;EAED;EACAyC,cAAc,EAAEA,CAAA,KAAM;IAClB,OAAO7B,OAAO,CAAC,CAAC;EACpB,CAAC;EAED;EACA8B,OAAO,EAAEA,CAAA,KAAM;IACX,MAAMjC,IAAI,GAAGG,OAAO,CAAC,CAAC;IACtB,OAAOH,IAAI,IAAIA,IAAI,CAACa,IAAI,KAAK,OAAO;EACxC,CAAC;EAED;EACAqB,cAAc,EAAEA,CAAA,KAAM;IAClB,MAAMlC,IAAI,GAAGG,OAAO,CAAC,CAAC;IACtB,OAAOH,IAAI,IAAIA,IAAI,CAACa,IAAI,KAAK,cAAc;EAC/C,CAAC;EAED;EACAsB,UAAU,EAAEA,CAAA,KAAM;IACd,MAAMnC,IAAI,GAAGG,OAAO,CAAC,CAAC;IACtB,OAAOH,IAAI,IAAIA,IAAI,CAACa,IAAI,KAAK,UAAU;EAC3C;AACJ,CAAC;AAED,eAAeJ,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000/api';\n\n// Token Management\nconst getToken = () => localStorage.getItem('token');\nconst setToken = token => localStorage.setItem('token', token);\nconst removeToken = () => localStorage.removeItem('token');\n\n//User Management\nconst setUser = user => localStorage.setItem('user', JSON.stringify(user));\nconst getUser = () => {\n  const userStr = localStorage.getItem('user');\n  return userStr ? JSON.parse(userStr) : null;\n};\nconst removeUser = () => localStorage.removeItem('user');\n\n// Create Axios Instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add auth token interceptor\napi.interceptors.request.use(config => {\n  const token = getToken();\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Product Service\nexport const productService = {\n  getAllProducts: async () => api.get('/products'),\n  getProductById: async productId => {\n    try {\n      const res = api.get(`/products/${productId}`);\n      return (await res).data;\n    } catch (err) {\n      var _err$res;\n      throw ((_err$res = err.res) === null || _err$res === void 0 ? void 0 : _err$res.data) || {\n        message: 'Terjadi kesalahan saat memunculkan products'\n      };\n    }\n  }\n};\n\n// User Service\nexport const userService = {\n  register: async (email, password, role = 'customer') => {\n    try {\n      const response = await api.post('/auth/register', {\n        email,\n        password,\n        role\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response;\n      throw ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || {\n        message: 'Terjadi kesalahan saat register'\n      };\n    }\n  },\n  login: async (email, password) => {\n    try {\n      const response = await api.post('/auth/login', {\n        email,\n        password\n      });\n      const {\n        token,\n        user\n      } = response.data;\n      setToken(token);\n      setUser(user);\n      return response.data;\n    } catch (error) {\n      var _error$response2;\n      throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || {\n        message: 'Terjadi kesalahan saat login'\n      };\n    }\n  },\n  logout: () => {\n    removeToken();\n    removeUser();\n  },\n  getProfile: async () => {\n    try {\n      const response = await api.get('/auth/profile');\n      return response.data;\n    } catch (error) {\n      var _error$response3, _error$response4;\n      if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 401) {\n        userService.logout();\n      }\n      throw ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || {\n        message: 'Terjadi kesalahan saat mengambil profil'\n      };\n    }\n  },\n  getAllUsers: async () => {\n    try {\n      const response = await api.get('/auth/users');\n      return response.data;\n    } catch (error) {\n      var _error$response5;\n      throw ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || {\n        message: 'Terjadi kesalahan saat mengambil data users'\n      };\n    }\n  },\n  isLoggedIn: () => !!getToken(),\n  getCurrentUser: () => getUser(),\n  isAdmin: () => {\n    const user = getUser();\n    return user && user.role === 'admin';\n  },\n  isOrganization: () => {\n    const user = getUser();\n    return user && user.role === 'organization';\n  },\n  isCustomer: () => {\n    const user = getUser();\n    return user && user.role === 'customer';\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","getToken","localStorage","getItem","setToken","token","setItem","removeToken","removeItem","setUser","user","JSON","stringify","getUser","userStr","parse","removeUser","api","create","baseURL","headers","interceptors","request","use","config","Authorization","productService","getAllProducts","get","getProductById","productId","res","data","err","_err$res","message","userService","register","email","password","role","response","post","error","_error$response","login","_error$response2","logout","getProfile","_error$response3","_error$response4","status","getAllUsers","_error$response5","isLoggedIn","getCurrentUser","isAdmin","isOrganization","isCustomer"],"sources":["C:/nodejsapp/utsbottledelivery/frontend/src/services/apiService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000/api';\r\n\r\n// Token Management\r\nconst getToken = () => localStorage.getItem('token');\r\nconst setToken = (token) => localStorage.setItem('token', token);\r\nconst removeToken = () => localStorage.removeItem('token');\r\n\r\n//User Management\r\nconst setUser = (user) => localStorage.setItem('user', JSON.stringify(user));\r\nconst getUser = () => {\r\n    const userStr = localStorage.getItem('user');\r\n    return userStr ? JSON.parse(userStr) : null;\r\n};\r\nconst removeUser = () => localStorage.removeItem('user');\r\n\r\n// Create Axios Instance\r\nconst api = axios.create({\r\n    baseURL: API_BASE_URL,\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    },\r\n});\r\n\r\n// Add auth token interceptor\r\napi.interceptors.request.use((config) => {\r\n    const token = getToken();\r\n    if (token) {\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n});\r\n\r\n// Product Service\r\nexport const productService = {\r\n    getAllProducts: async () => api.get('/products'),\r\n    getProductById: async (productId) => {\r\n        try {\r\n            const res = api.get(`/products/${productId}`);\r\n            return (await res).data;\r\n        } catch (err) {\r\n            throw err.res?.data || {message: 'Terjadi kesalahan saat memunculkan products'}\r\n        }\r\n    },\r\n}\r\n\r\n// User Service\r\nexport const userService = {\r\n    register: async (email, password, role = 'customer') => {\r\n        try {\r\n            const response = await api.post('/auth/register', {\r\n                email,\r\n                password,\r\n                role\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            throw error.response?.data || { message: 'Terjadi kesalahan saat register' };\r\n        }\r\n    },\r\n\r\n    login: async (email, password) => {\r\n        try {\r\n            const response = await api.post('/auth/login', {\r\n                email,\r\n                password\r\n            });\r\n            const { token, user } = response.data;\r\n            setToken(token);\r\n            setUser(user);\r\n            return response.data;\r\n        } catch (error) {\r\n            throw error.response?.data || { message: 'Terjadi kesalahan saat login' };\r\n        }\r\n    },\r\n\r\n    logout: () => {\r\n        removeToken();\r\n        removeUser();\r\n    },\r\n\r\n    getProfile: async () => {\r\n        try {\r\n            const response = await api.get('/auth/profile');\r\n            return response.data;\r\n        } catch (error) {\r\n            if (error.response?.status === 401) {\r\n                userService.logout();\r\n            }\r\n            throw error.response?.data || { message: 'Terjadi kesalahan saat mengambil profil' };\r\n        }\r\n    },\r\n\r\n    getAllUsers: async () => {\r\n        try {\r\n            const response = await api.get('/auth/users');\r\n            return response.data;\r\n        } catch (error) {\r\n            throw error.response?.data || { message: 'Terjadi kesalahan saat mengambil data users' };\r\n        }\r\n    },\r\n\r\n    isLoggedIn: () => !!getToken(),\r\n    getCurrentUser: () => getUser(),\r\n    isAdmin: () => {\r\n        const user = getUser();\r\n        return user && user.role === 'admin';\r\n    },\r\n    isOrganization: () => {\r\n        const user = getUser();\r\n        return user && user.role === 'organization';\r\n    },\r\n    isCustomer: () => {\r\n        const user = getUser();\r\n        return user && user.role === 'customer';\r\n    }\r\n};\r\n\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import axios from 'axios';\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000/api',\n  withCredentials: true,\n  // Enable sending cookies with requests\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nconst userService = {\n  register: async (email, password, role) => {\n    try {\n      const response = await api.post('/auth/register', {\n        email,\n        password,\n        role\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response;\n      throw ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || {\n        message: 'Terjadi kesalahan saat register'\n      };\n    }\n  },\n  login: async (email, password) => {\n    try {\n      const response = await api.post('/auth/login', {\n        email,\n        password\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response2;\n      throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || {\n        message: 'Terjadi kesalahan saat login'\n      };\n    }\n  },\n  logout: async () => {\n    try {\n      await api.post('/auth/logout');\n      window.location.href = '/login'; // Force reload to clear any client state\n    } catch (error) {\n      console.error('Error during logout:', error);\n    }\n  },\n  getProfile: async () => {\n    try {\n      const response = await api.get('/auth/profile');\n      return response.data;\n    } catch (error) {\n      var _error$response3;\n      throw ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || {\n        message: 'Terjadi kesalahan saat mengambil profil'\n      };\n    }\n  },\n  getCurrentUser: async () => {\n    try {\n      const response = await api.get('/auth/current-user');\n      return response.data.data;\n    } catch (error) {\n      return null;\n    }\n  },\n  isLoggedIn: async () => {\n    try {\n      await api.get('/auth/loin');\n      return true;\n    } catch (error) {\n      return false;\n    }\n  },\n  getAllUsers: async () => {\n    try {\n      const response = await api.get('/auth/users');\n      return response.data;\n    } catch (error) {\n      var _error$response4;\n      throw ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || {\n        message: 'Terjadi kesalahan saat mengambil data users'\n      };\n    }\n  },\n  isAdmin: async () => {\n    const user = await userService.getCurrentUser();\n    return (user === null || user === void 0 ? void 0 : user.role) === 'admin';\n  },\n  isCustomer: async () => {\n    const user = await userService.getCurrentUser();\n    return (user === null || user === void 0 ? void 0 : user.role) === 'customer';\n  },\n  isOrganization: async () => {\n    const user = await userService.getCurrentUser();\n    return (user === null || user === void 0 ? void 0 : user.role) === 'organization';\n  }\n};\nconst customerProfileService = {\n  getCustomerProfileById: async () => {\n    try {\n      const response = await api.get('/api/customers/profile');\n      return response.data;\n    } catch (error) {\n      var _error$response5;\n      throw ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || {\n        message: 'Terjadi kesalahan saat mengambil profil'\n      };\n    }\n  },\n  createCustomerProfile: async (full_name, phone, address, delivery_instructions) => {\n    try {\n      const response = await api.post('/api/customers/profile', {\n        full_name,\n        phone,\n        address,\n        delivery_instructions\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response6;\n      throw ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data) || {\n        message: 'Terjadi kesalahan saat membuat profil'\n      };\n    }\n  },\n  updateCustomerProfile: async (full_name, phone, address, delivery_instructions) => {\n    try {\n      const response = await api.post('/api/customers/profile', {\n        full_name,\n        phone,\n        address,\n        delivery_instructions\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response7;\n      throw ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.data) || {\n        message: 'Terjadi kesalahan saat mengupdate profil'\n      };\n    }\n  }\n};\nconst productService = {\n  getAllProducts: async () => {\n    try {\n      const response = await api.get('/api/products/allproduct');\n      return response.data;\n    } catch (error) {\n      var _error$response8;\n      throw ((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : _error$response8.data) || {\n        message: 'Terjadi kesalahan saat mengambil data produk'\n      };\n    }\n  },\n  getProductById: async productId => {\n    try {\n      const response = await api.get(`/api/products/${productId}`);\n      return response.data;\n    } catch (error) {\n      var _error$response9;\n      throw ((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : _error$response9.data) || {\n        message: 'Terjadi kesalahan saat mengambil detail produk'\n      };\n    }\n  }\n};\nexport { userService, customerProfileService, productService };","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","withCredentials","headers","userService","register","email","password","role","response","post","data","error","_error$response","message","login","_error$response2","logout","window","location","href","console","getProfile","get","_error$response3","getCurrentUser","isLoggedIn","getAllUsers","_error$response4","isAdmin","user","isCustomer","isOrganization","customerProfileService","getCustomerProfileById","_error$response5","createCustomerProfile","full_name","phone","address","delivery_instructions","_error$response6","updateCustomerProfile","_error$response7","productService","getAllProducts","_error$response8","getProductById","productId","_error$response9"],"sources":["C:/nodejsapp/utsbottledelivery/frontend/src/services/apiService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n    baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000/api',\r\n    withCredentials: true, // Enable sending cookies with requests\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    }\r\n});\r\n\r\nconst userService = {\r\n    register: async (email, password, role) => {\r\n        try {\r\n            const response = await api.post('/auth/register', {\r\n                email,\r\n                password,\r\n                role\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            throw error.response?.data || { message: 'Terjadi kesalahan saat register' };\r\n        }\r\n    },\r\n\r\n    login: async (email, password) => {\r\n        try {\r\n            const response = await api.post('/auth/login', {\r\n                email,\r\n                password\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            throw error.response?.data || { message: 'Terjadi kesalahan saat login' };\r\n        }\r\n    },\r\n\r\n    logout: async () => {\r\n        try {\r\n            await api.post('/auth/logout');\r\n            window.location.href = '/login'; // Force reload to clear any client state\r\n        } catch (error) {\r\n            console.error('Error during logout:', error);\r\n        }\r\n    },\r\n\r\n    getProfile: async () => {\r\n        try {\r\n            const response = await api.get('/auth/profile');\r\n            return response.data;\r\n        } catch (error) {\r\n            throw error.response?.data || { message: 'Terjadi kesalahan saat mengambil profil' };\r\n        }\r\n    },\r\n\r\n    getCurrentUser: async () => {\r\n        try {\r\n            const response = await api.get('/auth/current-user');\r\n            return response.data.data;\r\n        } catch (error) {\r\n            return null;\r\n        }\r\n    },\r\n\r\n    isLoggedIn: async () => {\r\n        try {\r\n            await api.get('/auth/loin');\r\n            return true;\r\n        } catch (error) {\r\n            return false;\r\n        }\r\n    },\r\n\r\n    getAllUsers: async () => {\r\n        try {\r\n            const response = await api.get('/auth/users');\r\n            return response.data;\r\n        } catch (error) {\r\n            throw error.response?.data || { message: 'Terjadi kesalahan saat mengambil data users' };\r\n        }\r\n    },\r\n\r\n    isAdmin: async () => {\r\n        const user = await userService.getCurrentUser();\r\n        return user?.role === 'admin';\r\n    },\r\n\r\n    isCustomer: async () => {\r\n        const user = await userService.getCurrentUser();\r\n        return user?.role === 'customer';\r\n    },\r\n\r\n    isOrganization: async () => {\r\n        const user = await userService.getCurrentUser();\r\n        return user?.role === 'organization';\r\n    }\r\n};\r\n\r\nconst customerProfileService = {\r\n    getCustomerProfileById: async () => {\r\n        try {\r\n            const response = await api.get('/api/customers/profile');\r\n            return response.data;\r\n        } catch (error) {\r\n            throw error.response?.data || { message: 'Terjadi kesalahan saat mengambil profil' };\r\n        }\r\n    },\r\n\r\n    createCustomerProfile: async (full_name, phone, address, delivery_instructions) => {\r\n        try {\r\n            const response = await api.post('/api/customers/profile', {\r\n                full_name,\r\n                phone,\r\n                address,\r\n                delivery_instructions\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            throw error.response?.data || { message: 'Terjadi kesalahan saat membuat profil' };\r\n        }\r\n    },\r\n\r\n    updateCustomerProfile: async (full_name, phone, address, delivery_instructions) => {\r\n        try {\r\n            const response = await api.post('/api/customers/profile', {\r\n                full_name,\r\n                phone,\r\n                address,\r\n                delivery_instructions\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            throw error.response?.data || { message: 'Terjadi kesalahan saat mengupdate profil' };\r\n        }\r\n    }\r\n};\r\n\r\nconst productService = {\r\n    getAllProducts: async () => {\r\n        try {\r\n            const response = await api.get('/api/products/allproduct');\r\n            return response.data;\r\n        } catch (error) {\r\n            throw error.response?.data || { message: 'Terjadi kesalahan saat mengambil data produk' };\r\n        }\r\n    },\r\n\r\n    getProductById: async (productId) => {\r\n        try {\r\n            const response = await api.get(`/api/products/${productId}`);\r\n            return response.data;\r\n        } catch (error) {\r\n            throw error.response?.data || { message: 'Terjadi kesalahan saat mengambil detail produk' };\r\n        }\r\n    }\r\n};\r\n\r\nexport { userService, customerProfileService, productService };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}